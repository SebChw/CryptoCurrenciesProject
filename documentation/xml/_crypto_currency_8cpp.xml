<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_crypto_currency_8cpp" kind="file" language="C++">
    <compoundname>CryptoCurrency.cpp</compoundname>
    <includes refid="_crypto_currency_8h" local="yes">CryptoCurrency.h</includes>
    <incdepgraph>
      <node id="1">
        <label>Currencies/CryptoCurrency.cpp</label>
        <link refid="_crypto_currency_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>CryptoCurrency.h</label>
        <link refid="_crypto_currency_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Currency.h</label>
        <link refid="_currency_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;CryptoCurrency.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="class_crypto_currency_1afa02582a8396eb457aee6c673065e0ed" kindref="member">CryptoCurrency::CryptoCurrency</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needed)<sp/>:<sp/><ref refid="class_currency" kindref="compound">Currency</ref>(amount,<sp/>name)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>workNeededToGetCrypto<sp/>=<sp/>needed;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>workDone<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_crypto_currency_1a284f165c3611c7cfecb53d78225736cd" kindref="member">CryptoCurrency::toString</ref>()</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_currency_1a88f55ebc519f49fb694aea66bc3ad2bb" kindref="member">Currency::toString</ref>();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Work<sp/>left<sp/>to<sp/>get<sp/>one<sp/>coin:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>workNeededToGetCrypto<sp/>-<sp/>workDone<sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="comment">//<sp/>So<sp/>that<sp/>user<sp/>knows<sp/>how<sp/>much<sp/>he<sp/>needs<sp/>to<sp/>do<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_crypto_currency_1a38c5d1590c96bddd3005efc6942493b8" kindref="member">CryptoCurrency::performWork</ref>()</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>this<sp/>method<sp/>in<sp/>mine()<sp/>method<sp/>of<sp/>inherithing<sp/>classes.<sp/>Here<sp/>we<sp/>can<sp/>withouth<sp/>a<sp/>problem<sp/>change<sp/>values<sp/>of<sp/>private<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>workDone<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(workNeededToGetCrypto<sp/>==<sp/>workDone)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workDone<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>do<sp/>enough<sp/>work<sp/>we<sp/>start<sp/>from<sp/>the<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>return<sp/>boolean<sp/>so<sp/>class<sp/>that<sp/>called<sp/>this<sp/>method<sp/>can<sp/>react<sp/>appropriately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_crypto_currency_1a848e1370cd40a8972357970a05ce00d4" kindref="member">CryptoCurrency::howMuchWork</ref>()</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>workNeededToGetCrypto<sp/>-<sp/>workDone;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//Definition<sp/>of<sp/>the<sp/>abstract<sp/>function<sp/>from<sp/>Currency<sp/>class.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_crypto_currency_1a9c34730ddc371863503cdcb3dc4e076c" kindref="member">CryptoCurrency::generateCurrency</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>possible<sp/>to<sp/>generate<sp/>more<sp/>CryptoCurrency!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Currencies/CryptoCurrency.cpp"/>
  </compounddef>
</doxygen>
